/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vistas;

import com.spire.doc.Section;
import java.awt.Graphics;
import java.awt.Image;
import javax.swing.ImageIcon;
import javax.swing.*;
import javax.swing.JPanel;
import javax.swing.event.DocumentListener;
import javax.swing.event.UndoableEditListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.Element;
import javax.swing.text.Position;
import javax.swing.text.Segment;



import com.spire.doc.FileFormat;
import com.spire.doc.Section;
import com.spire.doc.documents.Paragraph;
import com.spire.doc.documents.ParagraphStyle;
import com.spire.doc.fields.DocPicture;
import java.awt.Color;
import java.awt.Desktop;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 *
 * @author jocma
 */
public class GeneradorStruct extends javax.swing.JFrame {

    fondoBl fondo = new fondoBl();
   
    
    
    public GeneradorStruct() {
        this.setContentPane(fondo);
        initComponents();
        this.setLocationRelativeTo(null);
        
        
        cb_db.addItem("Oracle");
        cb_db.addItem("PostgresSQL");
        cb_db.addItem("MySQL");
        cb_db.addItem("SQLServer");
        
        cb_estruct.addItem("Trigger");
        cb_estruct.addItem("Funcion");
        cb_estruct.addItem("Transaccion");
        cb_estruct.addItem("PlSQL");
        
        cb_db1.addItem("Insert");
        cb_db1.addItem("Select");
        cb_db1.addItem("Update");
        cb_db1.addItem("Delete");        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new fondoBl();
        jPanel2 = new fondoP();
        cmd_regresar = new javax.swing.JButton();
        lbl_titulo = new javax.swing.JLabel();
        cb_db = new javax.swing.JComboBox<>();
        lbl_db = new javax.swing.JLabel();
        lbl_estructura = new javax.swing.JLabel();
        cb_estruct = new javax.swing.JComboBox<>();
        cmd_descargar = new javax.swing.JButton();
        cmd_limpiar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtContent = new javax.swing.JTextArea();
        cmd_generar = new javax.swing.JButton();
        cb_db1 = new javax.swing.JComboBox<>();
        lbl_estructura1 = new javax.swing.JLabel();
        cmd_generar1 = new javax.swing.JButton();
        txtNameTable = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        cmd_regresar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/regresar_32.png"))); // NOI18N
        cmd_regresar.setContentAreaFilled(false);
        cmd_regresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_regresarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(cmd_regresar)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cmd_regresar, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
        );

        lbl_titulo.setFont(new java.awt.Font("Rockwell", 0, 36)); // NOI18N
        lbl_titulo.setForeground(new java.awt.Color(51, 51, 51));
        lbl_titulo.setText("Estructuras de instrucciones");

        lbl_db.setFont(new java.awt.Font("Rockwell", 0, 14)); // NOI18N
        lbl_db.setForeground(new java.awt.Color(102, 102, 102));
        lbl_db.setText("Motor BD");

        lbl_estructura.setFont(new java.awt.Font("Rockwell", 0, 14)); // NOI18N
        lbl_estructura.setForeground(new java.awt.Color(102, 102, 102));
        lbl_estructura.setText("Estructura");

        cmd_descargar.setFont(new java.awt.Font("Rockwell", 1, 14)); // NOI18N
        cmd_descargar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/generar_24.png"))); // NOI18N
        cmd_descargar.setText("Descargar");
        cmd_descargar.setContentAreaFilled(false);
        cmd_descargar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmd_descargar.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/generar_32.png"))); // NOI18N
        cmd_descargar.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/generar_24.png"))); // NOI18N
        cmd_descargar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmd_descargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_descargarActionPerformed(evt);
            }
        });

        cmd_limpiar.setFont(new java.awt.Font("Rockwell", 1, 14)); // NOI18N
        cmd_limpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Limpiar_24.png"))); // NOI18N
        cmd_limpiar.setContentAreaFilled(false);
        cmd_limpiar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmd_limpiar.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Limpiar_32.png"))); // NOI18N
        cmd_limpiar.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Limpiar_24.png"))); // NOI18N
        cmd_limpiar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmd_limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_limpiarActionPerformed(evt);
            }
        });

        txtContent.setColumns(20);
        txtContent.setLineWrap(true);
        txtContent.setRows(5);
        jScrollPane3.setViewportView(txtContent);

        cmd_generar.setFont(new java.awt.Font("Rockwell", 1, 14)); // NOI18N
        cmd_generar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/agregar_24.png"))); // NOI18N
        cmd_generar.setText("Generar");
        cmd_generar.setContentAreaFilled(false);
        cmd_generar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmd_generar.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/agregar_48.png"))); // NOI18N
        cmd_generar.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/agregar_24.png"))); // NOI18N
        cmd_generar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmd_generar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_generarActionPerformed(evt);
            }
        });

        lbl_estructura1.setFont(new java.awt.Font("Rockwell", 0, 14)); // NOI18N
        lbl_estructura1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_estructura1.setText("DML");

        cmd_generar1.setFont(new java.awt.Font("Rockwell", 1, 14)); // NOI18N
        cmd_generar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/agregar_24.png"))); // NOI18N
        cmd_generar1.setText("DML");
        cmd_generar1.setContentAreaFilled(false);
        cmd_generar1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmd_generar1.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/agregar_48.png"))); // NOI18N
        cmd_generar1.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/agregar_24.png"))); // NOI18N
        cmd_generar1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmd_generar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_generar1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Rockwell", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setText("Nombre tabla:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(cb_db, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(cb_estruct, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addComponent(lbl_db)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lbl_estructura)
                                .addGap(42, 42, 42)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addComponent(cb_db1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(94, 94, 94)
                                .addComponent(lbl_estructura1))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(276, 276, 276)
                        .addComponent(cmd_limpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 617, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtNameTable, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cmd_generar, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmd_descargar, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmd_generar1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(lbl_titulo)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(lbl_titulo)
                .addGap(50, 50, 50)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_db)
                    .addComponent(lbl_estructura)
                    .addComponent(lbl_estructura1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cb_estruct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cb_db1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cb_db, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 95, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtNameTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(68, 68, 68))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cmd_descargar, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmd_generar, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmd_generar1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmd_limpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmd_regresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_regresarActionPerformed
      Menu mn = new Menu();
      this.dispose();
      mn.setVisible(true);
    }//GEN-LAST:event_cmd_regresarActionPerformed

    private void cmd_descargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_descargarActionPerformed
        
// TODO add your handling code here:

if(txtContent.getText().length()==0)
{
    JOptionPane.showMessageDialog(null, "Warning: Script en blanco!");
}
else{
    

        String ruta = "";
        JFileChooser chooser = new JFileChooser();

        if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            ruta = chooser.getSelectedFile().getAbsolutePath();
        }

        com.spire.doc.Document documento = new com.spire.doc.Document();

        Section section = documento.addSection();

        Paragraph parrafo_1 = section.addParagraph();
        parrafo_1.appendText(txtContent.getText());
        
        ParagraphStyle estilo = new ParagraphStyle(documento);
        
        estilo.setName("estiloNormal");
        /*estilo.getCharacterFormat().setFontName("Algerian");
        estilo.getCharacterFormat().setFontSize(10f);
        estilo.getCharacterFormat().setBold(true);
        estilo.getCharacterFormat().setTextColor(Color.BLUE);*/
        
        documento.getStyles().add(estilo);
        parrafo_1.applyStyle("estiloNormal");
        
        // Aquí recuerda cambiar la ruta de tu imagen
        //File imagen = new File("C:\\Users\\osvaldo\\Documents\\NetBeansProjects\\GenerarArchivoWord\\src\\iconos\\Logo.png");
        
        /*try {
            
            InputStream in = new FileInputStream(imagen);
            DocPicture picture = parrafo_1.appendPicture(in);
            picture.setHeight(100);
            picture.setWidth(100);
            
        } catch (IOException e) {
            Logger.getLogger(GeneradorStruct.class.getName()).log(Level.SEVERE, null, e);
        }*/
                

        documento.saveToFile(ruta + ".sql", FileFormat.Txt);

        /*File file = new File(ruta + ".sql");
        
        try {
            Desktop.getDesktop().open(file);
        } catch (IOException e) {
            Logger.getLogger(GeneradorStruct.class.getName()).log(Level.SEVERE, null, e);
        }*/
        
} 
        
        
    }//GEN-LAST:event_cmd_descargarActionPerformed

    private void cmd_limpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_limpiarActionPerformed
        // TODO add your handling code here:
        txtContent.setText("");
        txtNameTable.setText("");
    }//GEN-LAST:event_cmd_limpiarActionPerformed

    private void cmd_generarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_generarActionPerformed
        // TODO add your handling code here:
                if (cb_db.getSelectedItem().equals("Oracle") && cb_estruct.getSelectedItem().equals("Trigger")) {
                    txtContent.setText("--OracleTrigger\nCREATE OR REPLACE TRIGGER <nameTrigger>\nBEFORE INSERT ON <nameTable>\nFOR EACH ROW\n\tDECLARE\n\t\t<definirVariablesUtilizar>\n\tBEGIN\n\t\t<contentTransacción>\n\tEND;");
                }else if (cb_db.getSelectedItem().equals("PostgresSQL") && cb_estruct.getSelectedItem().equals("Trigger")) {
                    txtContent.setText("--PostgresSQLTrigger\nCREATE OR REPLACE TRIGGER HISTORIAL\nBEFORE INSERT\nON <nameTable> REFERENCING NEW AS NEW OLD AS OLD\nFOR EACH ROW\n\tDECLARE\n\tBEGIN\n\t\t<contentTransaction>\n\tEND;");
                }else if (cb_db.getSelectedItem().equals("MySQL") && cb_estruct.getSelectedItem().equals("Trigger")) {
                    txtContent.setText("--MySQLTrigger\nDELIMITER $$\nCREATE TRIGGER <nameTrigger>\nAFTER INSERT ON <nameTable>\nFOR EACH ROW\nBEGIN\n\t<contentTransaction>\nEND; $$");
                }else if (cb_db.getSelectedItem().equals("SQLServer") && cb_estruct.getSelectedItem().equals("Trigger")) {
                    txtContent.setText("--SQLServerTrigger\nCREATE TRIGGER OR REPLACE <nameTrigger>\n\tON <nameTable>\n\tAFTER UPDATE\n\t\tAS\n\t\t\tBEGIN\n\t\t\t\t<contentTransaction>\n\t\t\tEND");
                }else if (cb_db.getSelectedItem().equals("Oracle") && cb_estruct.getSelectedItem().equals("Funcion")) {
                    txtContent.setText("--OracleTFunciones\n//1. Devuelve la fecha actual\nSELECT CURRENT_DATE;\n\n\n//2. cambiar el tipo de dato a un campo\nCAST(<nameCampo> AS <typeData>) FROM <nameTable>;\n\n\n//3. Buscar un determinado patrón en una cadena de carácteres\nSELECT LOCATE(<cadenaBusar>,<cadenaEvaluar>);");
                }else if (cb_db.getSelectedItem().equals("PostgresSQL") && cb_estruct.getSelectedItem().equals("Funcion")) {
                    txtContent.setText("--PostgresSQLFunciones\n1. ON CONFLICT() DO\nINSERT INTO <nameTable> VALUES(<data>)\n\tON CONFLICT(<nameCampo>)\n\tDO UPDATE SET <atributos><data> ;\n\n\n//2. RETURNING\nINSERT INTO <nameTable>\n\tVALUES(<nameData>) RETURNING *;\n\n\n//3. LEAST() y GREATEST()\nSELECT LEAST(<data>);\n\nSELECT GREATEST(<data>);\n\n\n4. COALESCE\nSELECT <nameCampo>, COALESCE(<nameCampo>,<'N/A'>) FROM <nameTable>;");
                }else if (cb_db.getSelectedItem().equals("MySQL") && cb_estruct.getSelectedItem().equals("Funcion")) {
                    txtContent.setText("--MySQLFunciones\n//1. Concatenar dos o mas cadenas en una sola column\nSELECT <nameCampo1>, <nameCampo2>, CONCAT(<nameCampo1>, ' ' ,<nameCampo2>) AS <'nameOfNewCampo'> FROM <nameTable>;\n\n\n//2. Sumar todos los valores de una determinada columna\nSELECT SUM(<nameCampo>) AS <'nameOfNewCampo'> FROM <nameTable>;\n\n\n//3. Crear una función almacenada\nDELIMITER//\nCREATE FUNCTION <nameFunction> (<parameter1>,<parameter2>,...)\nRETURNS tipoDato\n\t<contentFunction>\nDELIMITER;");
                }else if (cb_db.getSelectedItem().equals("SQLServer") && cb_estruct.getSelectedItem().equals("Funcion")) {
                    txtContent.setText("--SQLServerFunciones\n//1. Crear funciones almacenadas por el usuario\nCREATE OR REPLACE FUNCTION <nameFunction>(\n@DateValue AS DATETIME    //<contentFunction>\n)\nRETURNS VARCHAR(MAX)\nAS\nBEGIN\n\tRETURN\n\t\tDATENAME(DAY, @DateValue)\nEND");
                }else if (cb_db.getSelectedItem().equals("Oracle") && cb_estruct.getSelectedItem().equals("Transaccion")) {
                    txtContent.setText("--OracleTransacción\nDECLARE\n\t\t<definirVariablesUtilizar>\n\tBEGIN\n\t\t<contentTransacción>\n\tCOMMIT;\n\tEND;");
                }else if (cb_db.getSelectedItem().equals("PostgresSQL") && cb_estruct.getSelectedItem().equals("Transaccion")) {
                    txtContent.setText("--PostgresSQLTransacciones\nBEGIN\n\t//<definirVariablesUtilizar>\n\t//<definirContenido>\n\tCOMMIT;\n\tEXCEPTION\n\t\tWHEN OTHERS THEN\n\t\tdbms_output.put_line('error en la transaction:' || SQLERRM);\n\t\tROLLBACK;\nEND;");
                }else if (cb_db.getSelectedItem().equals("MySQL") && cb_estruct.getSelectedItem().equals("Transaccion")) {
                    txtContent.setText("--MySQLTransacción\nSTART TRANSACTION\n\t<contentTransaction>\nCOMMIT;");
                }else if (cb_db.getSelectedItem().equals("SQLServer") && cb_estruct.getSelectedItem().equals("Transaccion")) {
                    txtContent.setText("--SQLServer-Transacciones\nBEGIN TRAN\n\t<contentTransaccion>\nCOMMIT;");
                }else if (cb_db.getSelectedItem().equals("Oracle") && cb_estruct.getSelectedItem().equals("PlSQL")) {
                    txtContent.setText("--OracleT-PL/SQL\nDECLARE\n\tl_message\n\tVARCHAR2 (100) := 'Hello Wordl';\nBEGIN\n\tdbms_output.put_line(l_message);\nEND;");
                }else if (cb_db.getSelectedItem().equals("PostgresSQL") && cb_estruct.getSelectedItem().equals("PlSQL")) {
                    txtContent.setText("--PostgresSQL-PL/SQL\nDO $$\nBEGIN\n\tRAISE NOTICE 'PL/SQL';   //<nameCampo> <'nameData'>;\nEND\n$$");
                }else if (cb_db.getSelectedItem().equals("MySQL") && cb_estruct.getSelectedItem().equals("PlSQL")) {
                    txtContent.setText("--MySQL-PL/SQL\n");
                }else if (cb_db.getSelectedItem().equals("SQLServer") && cb_estruct.getSelectedItem().equals("PlSQL")) {
                    txtContent.setText("SQLServerPlSQL");
                }
    }//GEN-LAST:event_cmd_generarActionPerformed

    private void cmd_generar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_generar1ActionPerformed
        // TODO add your handling code here:
        
                
        if(txtNameTable.getText().length()==0)
        {
            JOptionPane.showMessageDialog(null, "Warning: Nombre de tabla vacio!");
        }
        else{
            
      
                if (cb_db.getSelectedItem().equals("Oracle") && cb_estruct.getSelectedItem().equals("Trigger") && cb_db1.getSelectedItem().equals("Insert")) {
                    txtContent.setText("--OracleTrigger\nCREATE OR REPLACE TRIGGER <nameTrigger>\nBEFORE INSERT ON "+txtNameTable.getText()+"\nFOR EACH ROW\n\tDECLARE\n\t\t<definirVariablesUtilizar>\n\tBEGIN\n\t\tINSERT INTO "+txtNameTable.getText()+" VALUES(<data>);\n\tEND;");
                }else if (cb_db.getSelectedItem().equals("PostgresSQL") && cb_estruct.getSelectedItem().equals("Trigger") && cb_db1.getSelectedItem().equals("Insert")) {
                    txtContent.setText("--PostgresSQLTrigger\nCREATE OR REPLACE TRIGGER HISTORIAL\nBEFORE INSERT\nON "+txtNameTable.getText()+" REFERENCING NEW AS NEW OLD AS OLD\nFOR EACH ROW\n\tDECLARE\n\tBEGIN\n\t\tINSERT INTO "+txtNameTable.getText()+" VALUES(<data>);\n\tEND;");
                }else if (cb_db.getSelectedItem().equals("MySQL") && cb_estruct.getSelectedItem().equals("Trigger") && cb_db1.getSelectedItem().equals("Insert")) {
                    txtContent.setText("--MySQLTrigger\nDELIMITER $$\nCREATE TRIGGER <nameTrigger>\nAFTER INSERT ON "+txtNameTable.getText()+"\nFOR EACH ROW\nBEGIN\n\tINSERT INTO "+txtNameTable.getText()+" VALUES(<data>);\nEND; $$");
                }else if (cb_db.getSelectedItem().equals("SQLServer") && cb_estruct.getSelectedItem().equals("Trigger") && cb_db1.getSelectedItem().equals("Insert")) {
                    txtContent.setText("--SQLServerTrigger\nCREATE TRIGGER OR REPLACE <nameTrigger>\n\tON "+txtNameTable.getText()+"\n\tAFTER UPDATE\n\t\tAS\n\t\t\tBEGIN\n\t\t\t\tINSERT INTO "+txtNameTable.getText()+" VALUES(<data>);\n\t\t\tEND");
                }else if (cb_db.getSelectedItem().equals("Oracle") && cb_estruct.getSelectedItem().equals("Funcion") && cb_db1.getSelectedItem().equals("Insert")) {
                    txtContent.setText("--OracleTFunciones\n//1. Devuelve la fecha actual\nSELECT CURRENT_DATE;\n\n\n//2. cambiar el tipo de dato a un campo\nCAST(<nameCampo> AS <typeData>) FROM "+txtNameTable.getText()+";\n\n\n//3. Buscar un determinado patrón en una cadena de carácteres\nSELECT LOCATE(<cadenaBusar>,<cadenaEvaluar>);");
                }else if (cb_db.getSelectedItem().equals("PostgresSQL") && cb_estruct.getSelectedItem().equals("Funcion") && cb_db1.getSelectedItem().equals("Insert")) {
                    txtContent.setText("--PostgresSQLFunciones\n1. ON CONFLICT() DO\nINSERT INTO "+txtNameTable.getText()+" VALUES(<data>)\n\tON CONFLICT(<nameCampo>)\n\tDO UPDATE SET <atributos><data> ;\n\n\n//2. RETURNING\nINSERT INTO "+txtNameTable.getText()+"\n\tVALUES(<nameData>) RETURNING *;\n\n\n//3. LEAST() y GREATEST()\nSELECT LEAST(<data>);\n\nSELECT GREATEST(<data>);\n\n\n4. COALESCE\nSELECT <nameCampo>, COALESCE(<nameCampo>,<'N/A'>) FROM "+txtNameTable.getText()+";");
                }else if (cb_db.getSelectedItem().equals("MySQL") && cb_estruct.getSelectedItem().equals("Funcion") && cb_db1.getSelectedItem().equals("Insert")) {
                    txtContent.setText("--MySQLFunciones\n//1. Concatenar dos o mas cadenas en una sola column\nSELECT <nameCampo1>, <nameCampo2>, CONCAT(<nameCampo1>, ' ' ,<nameCampo2>) AS <'nameOfNewCampo'> FROM "+txtNameTable.getText()+";\n\n\n//2. Sumar todos los valores de una determinada columna\nSELECT SUM(<nameCampo>) AS <'nameOfNewCampo'> FROM "+txtNameTable.getText()+";\n\n\n//3. Crear una función almacenada\nDELIMITER//\nCREATE FUNCTION <nameFunction> (<parameter1>,<parameter2>,...)\nRETURNS tipoDato\n\tINSERT INTO "+txtNameTable.getText()+" VALUES(<data>);\nDELIMITER;");
                }else if (cb_db.getSelectedItem().equals("SQLServer") && cb_estruct.getSelectedItem().equals("Funcion") && cb_db1.getSelectedItem().equals("Insert")) {
                    txtContent.setText("--SQLServerFunciones\n//1. Crear funciones almacenadas por el usuario\nCREATE OR REPLACE FUNCTION <nameFunction>(\n@DateValue AS DATETIME    //INSERT INTO "+txtNameTable.getText()+" VALUES(<data>);\n)\nRETURNS VARCHAR(MAX)\nAS\nBEGIN\n\tRETURN\n\t\tDATENAME(DAY, @DateValue)\nEND");
                }else if (cb_db.getSelectedItem().equals("Oracle") && cb_estruct.getSelectedItem().equals("Transaccion") && cb_db1.getSelectedItem().equals("Insert")) {
                    txtContent.setText("--OracleTransacción\nDECLARE\n\t\t<definirVariablesUtilizar>\n\tBEGIN\n\t\tINSERT INTO "+txtNameTable.getText()+" VALUES(<data>);\n\tCOMMIT;\n\tEND;");
                }else if (cb_db.getSelectedItem().equals("PostgresSQL") && cb_estruct.getSelectedItem().equals("Transaccion") && cb_db1.getSelectedItem().equals("Insert")) {
                    txtContent.setText("--PostgresSQLTransacciones\nBEGIN\n\t//<definirVariablesUtilizar>\n\t//INSERT INTO "+txtNameTable.getText()+" VALUES(<data>);\n\tCOMMIT;\n\tEXCEPTION\n\t\tWHEN OTHERS THEN\n\t\tdbms_output.put_line('error en la transaction:' || SQLERRM);\n\t\tROLLBACK;\nEND;");
                }else if (cb_db.getSelectedItem().equals("MySQL") && cb_estruct.getSelectedItem().equals("Transaccion") && cb_db1.getSelectedItem().equals("Insert")) {
                    txtContent.setText("--MySQLTransacción\nSTART TRANSACTION\n\tINSERT INTO "+txtNameTable.getText()+" VALUES(<data>);\nCOMMIT;");
                }else if (cb_db.getSelectedItem().equals("SQLServer") && cb_estruct.getSelectedItem().equals("Transaccion") && cb_db1.getSelectedItem().equals("Insert")) {
                    txtContent.setText("--SQLServer-Transacciones\nBEGIN TRAN\n\tINSERT INTO "+txtNameTable.getText()+" VALUES(<data>);\nCOMMIT;");
                }else if (cb_db.getSelectedItem().equals("Oracle") && cb_estruct.getSelectedItem().equals("PlSQL") && cb_db1.getSelectedItem().equals("Insert")) {
                    txtContent.setText("--OracleT-PL/SQL\nDECLARE\n\tl_message\n\tVARCHAR2 (100) := 'Hello Wordl';\nBEGIN\n\tdbms_output.put_line(l_message);\nEND;");
                }else if (cb_db.getSelectedItem().equals("PostgresSQL") && cb_estruct.getSelectedItem().equals("PlSQL") && cb_db1.getSelectedItem().equals("Insert")) {
                    txtContent.setText("--PostgresSQL-PL/SQL\nDO $$\nBEGIN\n\tRAISE NOTICE 'PL/SQL';   --<nameCampo> <'nameData'>;\nEND\n$$");
                }else if (cb_db.getSelectedItem().equals("MySQL") && cb_estruct.getSelectedItem().equals("PlSQL") && cb_db1.getSelectedItem().equals("Insert")) {
                    txtContent.setText("--MySQL-PL/SQL\n");
                }else if (cb_db.getSelectedItem().equals("SQLServer") && cb_estruct.getSelectedItem().equals("PlSQL") && cb_db1.getSelectedItem().equals("Insert")) {
                    txtContent.setText("SQLServerPlSQL");
                }else if (cb_db.getSelectedItem().equals("Oracle") && cb_estruct.getSelectedItem().equals("Trigger") && cb_db1.getSelectedItem().equals("Select")) {
                    txtContent.setText("--OracleTrigger\nCREATE OR REPLACE TRIGGER <nameTrigger>\nBEFORE INSERT ON "+txtNameTable.getText()+"\nFOR EACH ROW\n\tDECLARE\n\t\t--<definirVariablesUtilizar>\n\tBEGIN\n\t\tSELECT * FROM "+txtNameTable.getText()+";\n\tEND;");
                }else if (cb_db.getSelectedItem().equals("PostgresSQL") && cb_estruct.getSelectedItem().equals("Trigger") && cb_db1.getSelectedItem().equals("Select")) {
                    txtContent.setText("--PostgresSQLTrigger\nCREATE OR REPLACE TRIGGER HISTORIAL\nBEFORE INSERT\nON "+txtNameTable.getText()+" REFERENCING NEW AS NEW OLD AS OLD\nFOR EACH ROW\n\tDECLARE\n\tBEGIN\n\t\tSELECT * FROM "+txtNameTable.getText()+";\n\tEND;");
                }else if (cb_db.getSelectedItem().equals("MySQL") && cb_estruct.getSelectedItem().equals("Trigger") && cb_db1.getSelectedItem().equals("Select")) {
                    txtContent.setText("--MySQLTrigger\nDELIMITER $$\nCREATE TRIGGER <nameTrigger>\nAFTER INSERT ON "+txtNameTable.getText()+"\nFOR EACH ROW\nBEGIN\n\tSELECT * FROM "+txtNameTable.getText()+";\nEND; $$");
                }else if (cb_db.getSelectedItem().equals("SQLServer") && cb_estruct.getSelectedItem().equals("Trigger") && cb_db1.getSelectedItem().equals("Select")) {
                    txtContent.setText("--SQLServerTrigger\nCREATE TRIGGER OR REPLACE <nameTrigger>\n\tON "+txtNameTable.getText()+"\n\tAFTER UPDATE\n\t\tAS\n\t\t\tBEGIN\n\t\t\t\tSELECT * FROM "+txtNameTable.getText()+";\n\t\t\tEND");
                }else if (cb_db.getSelectedItem().equals("Oracle") && cb_estruct.getSelectedItem().equals("Funcion") && cb_db1.getSelectedItem().equals("Select")) {
                    txtContent.setText("--OracleTFunciones\n--1. Devuelve la fecha actual\nSELECT CURRENT_DATE;\n\n\n--2. cambiar el tipo de dato a un campo\nCAST(<nameCampo> AS <typeData>) FROM "+txtNameTable.getText()+";\n\n\n--3. Buscar un determinado patrón en una cadena de carácteres\nSELECT LOCATE(<cadenaBusar>,<cadenaEvaluar>);");
                }else if (cb_db.getSelectedItem().equals("PostgresSQL") && cb_estruct.getSelectedItem().equals("Funcion") && cb_db1.getSelectedItem().equals("Select")) {
                    txtContent.setText("--PostgresSQLFunciones\n1. ON CONFLICT() DO\nINSERT INTO "+txtNameTable.getText()+" VALUES(<data>)\n\tON CONFLICT(<nameCampo>)\n\tDO UPDATE SET <atributos><data> ;\n\n\n--2. RETURNING\nSELECT * FROM "+txtNameTable.getText()+";\n\tVALUES(<nameData>) RETURNING *;\n\n\n--3. LEAST() y GREATEST()\nSELECT LEAST(<data>);\n\nSELECT GREATEST(<data>);\n\n\n4. COALESCE\nSELECT <nameCampo>, COALESCE(<nameCampo>,<'N/A'>) FROM "+txtNameTable.getText()+";");
                }else if (cb_db.getSelectedItem().equals("MySQL") && cb_estruct.getSelectedItem().equals("Funcion") && cb_db1.getSelectedItem().equals("Select")) {
                    txtContent.setText("--MySQLFunciones\n--1. Concatenar dos o mas cadenas en una sola column\nSELECT <nameCampo1>, <nameCampo2>, CONCAT(<nameCampo1>, ' ' ,<nameCampo2>) AS <'nameOfNewCampo'> FROM "+txtNameTable.getText()+";\n\n\n--2. Sumar todos los valores de una determinada columna\nSELECT SUM(<nameCampo>) AS <'nameOfNewCampo'> FROM "+txtNameTable.getText()+";\n\n\n--3. Crear una función almacenada\nDELIMITER//\nCREATE FUNCTION <nameFunction> (<parameter1>,<parameter2>,...)\nRETURNS tipoDato\n\tSELECT * FROM "+txtNameTable.getText()+";\nDELIMITER;");
                }else if (cb_db.getSelectedItem().equals("SQLServer") && cb_estruct.getSelectedItem().equals("Funcion") && cb_db1.getSelectedItem().equals("Select")) {
                    txtContent.setText("--SQLServerFunciones\n--1. Crear funciones almacenadas por el usuario\nCREATE OR REPLACE FUNCTION <nameFunction>(\n@DateValue AS DATETIME    /n/tSELECT * FROM "+txtNameTable.getText()+";\n)\nRETURNS VARCHAR(MAX)\nAS\nBEGIN\n\tRETURN\n\t\tDATENAME(DAY, @DateValue)\nEND");
                }else if (cb_db.getSelectedItem().equals("Oracle") && cb_estruct.getSelectedItem().equals("Transaccion") && cb_db1.getSelectedItem().equals("Select")) {
                    txtContent.setText("--OracleTransacción\nDECLARE\n\t\t<definirVariablesUtilizar>\n\tBEGIN\n\t\tSELECT * FROM "+txtNameTable.getText()+";\n\tCOMMIT;\n\tEND;");
                }else if (cb_db.getSelectedItem().equals("PostgresSQL") && cb_estruct.getSelectedItem().equals("Transaccion") && cb_db1.getSelectedItem().equals("Select")) {
                    txtContent.setText("--PostgresSQLTransacciones\nBEGIN\n\t--<definirVariablesUtilizar>\n\tSELECT * FROM "+txtNameTable.getText()+";\n\tCOMMIT;\n\tEXCEPTION\n\t\tWHEN OTHERS THEN\n\t\tdbms_output.put_line('error en la transaction:' || SQLERRM);\n\t\tROLLBACK;\nEND;");
                }else if (cb_db.getSelectedItem().equals("MySQL") && cb_estruct.getSelectedItem().equals("Transaccion") && cb_db1.getSelectedItem().equals("Select")) {
                    txtContent.setText("--MySQLTransacción\nSTART TRANSACTION\n\tSELECT * FROM "+txtNameTable.getText()+";\nCOMMIT;");
                }else if (cb_db.getSelectedItem().equals("SQLServer") && cb_estruct.getSelectedItem().equals("Transaccion") && cb_db1.getSelectedItem().equals("Select")) {
                    txtContent.setText("--SQLServer-Transacciones\nBEGIN TRAN\n\tSELECT * FROM "+txtNameTable.getText()+";\nCOMMIT;");
                }else if (cb_db.getSelectedItem().equals("Oracle") && cb_estruct.getSelectedItem().equals("PlSQL") && cb_db1.getSelectedItem().equals("Select")) {
                    txtContent.setText("--OracleT-PL/SQL\nDECLARE\n\tl_message\n\tVARCHAR2 (100) := 'Hello Wordl';\nBEGIN\n\tdbms_output.put_line(l_message);\nEND;");
                }else if (cb_db.getSelectedItem().equals("PostgresSQL") && cb_estruct.getSelectedItem().equals("PlSQL") && cb_db1.getSelectedItem().equals("Select")) {
                    txtContent.setText("--PostgresSQL-PL/SQL\nDO $$\nBEGIN\n\tRAISE NOTICE 'PL/SQL';   --<nameCampo> <'nameData'>;\nEND\n$$");
                }else if (cb_db.getSelectedItem().equals("MySQL") && cb_estruct.getSelectedItem().equals("PlSQL") && cb_db1.getSelectedItem().equals("Select")) {
                    txtContent.setText("--MySQL-PL/SQL\n");
                }else if (cb_db.getSelectedItem().equals("SQLServer") && cb_estruct.getSelectedItem().equals("PlSQL") && cb_db1.getSelectedItem().equals("Select")) {
                    txtContent.setText("SQLServerPlSQL");
                }else if (cb_db.getSelectedItem().equals("Oracle") && cb_estruct.getSelectedItem().equals("Trigger") && cb_db1.getSelectedItem().equals("Delete")) {
                    txtContent.setText("--OracleTrigger\nCREATE OR REPLACE TRIGGER <nameTrigger>\nBEFORE INSERT ON "+txtNameTable.getText()+"\nFOR EACH ROW\n\tDECLARE\n\t\t--<definirVariablesUtilizar>\n\tBEGIN\n\t\tDELETE FROM "+txtNameTable.getText()+" WHERE <condition>;\n\tEND;");
                }else if (cb_db.getSelectedItem().equals("PostgresSQL") && cb_estruct.getSelectedItem().equals("Trigger") && cb_db1.getSelectedItem().equals("Delete")) {
                    txtContent.setText("--PostgresSQLTrigger\nCREATE OR REPLACE TRIGGER HISTORIAL\nBEFORE INSERT\nON "+txtNameTable.getText()+" REFERENCING NEW AS NEW OLD AS OLD\nFOR EACH ROW\n\tDECLARE\n\tBEGIN\n\t\tDELETE FROM "+txtNameTable.getText()+" WHERE <condition>;\n\tEND;");
                }else if (cb_db.getSelectedItem().equals("MySQL") && cb_estruct.getSelectedItem().equals("Trigger") && cb_db1.getSelectedItem().equals("Delete")) {
                    txtContent.setText("--MySQLTrigger\nDELIMITER $$\nCREATE TRIGGER <nameTrigger>\nAFTER INSERT ON "+txtNameTable.getText()+"\nFOR EACH ROW\nBEGIN\n\tDELETE FROM "+txtNameTable.getText()+" WHERE <condition>;\nEND; $$");
                }else if (cb_db.getSelectedItem().equals("SQLServer") && cb_estruct.getSelectedItem().equals("Trigger") && cb_db1.getSelectedItem().equals("Delete")) {
                    txtContent.setText("--SQLServerTrigger\nCREATE TRIGGER OR REPLACE <nameTrigger>\n\tON "+txtNameTable.getText()+"\n\tAFTER UPDATE\n\t\tAS\n\t\t\tBEGIN\n\t\t\t\tDELETE FROM "+txtNameTable.getText()+" WHERE <condition>;\n\t\t\tEND");
                }else if (cb_db.getSelectedItem().equals("Oracle") && cb_estruct.getSelectedItem().equals("Funcion") && cb_db1.getSelectedItem().equals("Delete")) {
                    txtContent.setText("--OracleTFunciones\n--1. Devuelve la fecha actual\nSELECT CURRENT_DATE;\n\n\n--2. cambiar el tipo de dato a un campo\nCAST(<nameCampo> AS <typeData>) FROM "+txtNameTable.getText()+";\n\n\n--3. Buscar un determinado patrón en una cadena de carácteres\nSELECT LOCATE(<cadenaBusar>,<cadenaEvaluar>);");
                }else if (cb_db.getSelectedItem().equals("PostgresSQL") && cb_estruct.getSelectedItem().equals("Funcion") && cb_db1.getSelectedItem().equals("Delete")) {
                    txtContent.setText("--PostgresSQLFunciones\n1. ON CONFLICT() DO\nINSERT INTO "+txtNameTable.getText()+" VALUES(<data>)\n\tON CONFLICT(<nameCampo>)\n\tDO UPDATE SET <atributos><data> ;\n\n\n--2. RETURNING\nDELETE FROM "+txtNameTable.getText()+" WHERE <condition>;\n\tVALUES(<nameData>) RETURNING *;\n\n\n--3. LEAST() y GREATEST()\nSELECT LEAST(<data>);\n\nSELECT GREATEST(<data>);\n\n\n4. COALESCE\nSELECT <nameCampo>, COALESCE(<nameCampo>,<'N/A'>) FROM "+txtNameTable.getText()+";");
                }else if (cb_db.getSelectedItem().equals("MySQL") && cb_estruct.getSelectedItem().equals("Funcion") && cb_db1.getSelectedItem().equals("Delete")) {
                    txtContent.setText("--MySQLFunciones\n--1. Concatenar dos o mas cadenas en una sola column\nSELECT <nameCampo1>, <nameCampo2>, CONCAT(<nameCampo1>, ' ' ,<nameCampo2>) AS <'nameOfNewCampo'> FROM "+txtNameTable.getText()+";\n\n\n--2. Sumar todos los valores de una determinada columna\nSELECT SUM(<nameCampo>) AS <'nameOfNewCampo'> FROM "+txtNameTable.getText()+";\n\n\n--3. Crear una función almacenada\nDELIMITER//\nCREATE FUNCTION <nameFunction> (<parameter1>,<parameter2>,...)\nRETURNS tipoDato\n\tDELETE FROM "+txtNameTable.getText()+" WHERE <condition>;\nDELIMITER;");
                }else if (cb_db.getSelectedItem().equals("SQLServer") && cb_estruct.getSelectedItem().equals("Funcion") && cb_db1.getSelectedItem().equals("Delete")) {
                    txtContent.setText("--SQLServerFunciones\n--1. Crear funciones almacenadas por el usuario\nCREATE OR REPLACE FUNCTION <nameFunction>(\n@DateValue AS DATETIME    /n/tDELETE FROM "+txtNameTable.getText()+" WHERE <condition>;\n)\nRETURNS VARCHAR(MAX)\nAS\nBEGIN\n\tRETURN\n\t\tDATENAME(DAY, @DateValue)\nEND");
                }else if (cb_db.getSelectedItem().equals("Oracle") && cb_estruct.getSelectedItem().equals("Transaccion") && cb_db1.getSelectedItem().equals("Delete")) {
                    txtContent.setText("--OracleTransacción\nDECLARE\n\t\t<definirVariablesUtilizar>\n\tBEGIN\n\t\tDELETE FROM "+txtNameTable.getText()+" WHERE <condition>;\n\tCOMMIT;\n\tEND;");
                }else if (cb_db.getSelectedItem().equals("PostgresSQL") && cb_estruct.getSelectedItem().equals("Transaccion") && cb_db1.getSelectedItem().equals("Delete")) {
                    txtContent.setText("--PostgresSQLTransacciones\nBEGIN\n\t--<definirVariablesUtilizar>\n\tDELETE FROM "+txtNameTable.getText()+" WHERE <condition>;\n\tCOMMIT;\n\tEXCEPTION\n\t\tWHEN OTHERS THEN\n\t\tdbms_output.put_line('error en la transaction:' || SQLERRM);\n\t\tROLLBACK;\nEND;");
                }else if (cb_db.getSelectedItem().equals("MySQL") && cb_estruct.getSelectedItem().equals("Transaccion") && cb_db1.getSelectedItem().equals("Delete")) {
                    txtContent.setText("--MySQLTransacción\nSTART TRANSACTION\n\tDELETE FROM "+txtNameTable.getText()+" WHERE <condition>;\nCOMMIT;");
                }else if (cb_db.getSelectedItem().equals("SQLServer") && cb_estruct.getSelectedItem().equals("Transaccion") && cb_db1.getSelectedItem().equals("Delete")) {
                    txtContent.setText("--SQLServer-Transacciones\nBEGIN TRAN\n\tDELETE FROM "+txtNameTable.getText()+" WHERE <condition>;\nCOMMIT;");
                }else if (cb_db.getSelectedItem().equals("Oracle") && cb_estruct.getSelectedItem().equals("PlSQL") && cb_db1.getSelectedItem().equals("Delete")) {
                    txtContent.setText("--OracleT-PL/SQL\nDECLARE\n\tl_message\n\tVARCHAR2 (100) := 'Hello Wordl';\nBEGIN\n\tdbms_output.put_line(l_message);\nEND;");
                }else if (cb_db.getSelectedItem().equals("PostgresSQL") && cb_estruct.getSelectedItem().equals("PlSQL") && cb_db1.getSelectedItem().equals("Delete")) {
                    txtContent.setText("--PostgresSQL-PL/SQL\nDO $$\nBEGIN\n\tRAISE NOTICE 'PL/SQL';   --<nameCampo> <'nameData'>;\nEND\n$$");
                }else if (cb_db.getSelectedItem().equals("MySQL") && cb_estruct.getSelectedItem().equals("PlSQL") && cb_db1.getSelectedItem().equals("Delete")) {
                    txtContent.setText("--MySQL-PL/SQL\n");
                }else if (cb_db.getSelectedItem().equals("SQLServer") && cb_estruct.getSelectedItem().equals("PlSQL") && cb_db1.getSelectedItem().equals("Delete")) {
                    txtContent.setText("SQLServerPlSQL");
                }else if (cb_db.getSelectedItem().equals("Oracle") && cb_estruct.getSelectedItem().equals("Trigger") && cb_db1.getSelectedItem().equals("Update")) {
                    txtContent.setText("--OracleTrigger\nCREATE OR REPLACE TRIGGER <nameTrigger>\nBEFORE INSERT ON "+txtNameTable.getText()+"\nFOR EACH ROW\n\tDECLARE\n\t\t--<definirVariablesUtilizar>\n\tBEGIN\n\t\tUPDATE "+txtNameTable.getText()+" SET <data> WHERE <condition> ;\n\tEND;");
                }else if (cb_db.getSelectedItem().equals("PostgresSQL") && cb_estruct.getSelectedItem().equals("Trigger") && cb_db1.getSelectedItem().equals("Update")) {
                    txtContent.setText("--PostgresSQLTrigger\nCREATE OR REPLACE TRIGGER HISTORIAL\nBEFORE INSERT\nON "+txtNameTable.getText()+" REFERENCING NEW AS NEW OLD AS OLD\nFOR EACH ROW\n\tDECLARE\n\tBEGIN\n\t\tUPDATE "+txtNameTable.getText()+" SET <data> WHERE <condition> ;\n\tEND;");
                }else if (cb_db.getSelectedItem().equals("MySQL") && cb_estruct.getSelectedItem().equals("Trigger") && cb_db1.getSelectedItem().equals("Update")) {
                    txtContent.setText("--MySQLTrigger\nDELIMITER $$\nCREATE TRIGGER <nameTrigger>\nAFTER INSERT ON "+txtNameTable.getText()+"\nFOR EACH ROW\nBEGIN\n\tUPDATE "+txtNameTable.getText()+" SET <data> WHERE <condition> ;\nEND; $$");
                }else if (cb_db.getSelectedItem().equals("SQLServer") && cb_estruct.getSelectedItem().equals("Trigger") && cb_db1.getSelectedItem().equals("Update")) {
                    txtContent.setText("--SQLServerTrigger\nCREATE TRIGGER OR REPLACE <nameTrigger>\n\tON "+txtNameTable.getText()+"\n\tAFTER UPDATE\n\t\tAS\n\t\t\tBEGIN\n\t\t\t\tUPDATE "+txtNameTable.getText()+" SET <data> WHERE <condition> ;\n\t\t\tEND");
                }else if (cb_db.getSelectedItem().equals("Oracle") && cb_estruct.getSelectedItem().equals("Funcion") && cb_db1.getSelectedItem().equals("Update")) {
                    txtContent.setText("--OracleTFunciones\n--1. Devuelve la fecha actual\nSELECT CURRENT_DATE;\n\n\n--2. cambiar el tipo de dato a un campo\nCAST(<nameCampo> AS <typeData>) FROM "+txtNameTable.getText()+";\n\n\n--3. Buscar un determinado patrón en una cadena de carácteres\nSELECT LOCATE(<cadenaBusar>,<cadenaEvaluar>);");
                }else if (cb_db.getSelectedItem().equals("PostgresSQL") && cb_estruct.getSelectedItem().equals("Funcion") && cb_db1.getSelectedItem().equals("Update")) {
                    txtContent.setText("--PostgresSQLFunciones\n1. ON CONFLICT() DO\nINSERT INTO "+txtNameTable.getText()+" VALUES(<data>)\n\tON CONFLICT(<nameCampo>)\n\tDO UPDATE SET <atributos><data> ;\n\n\n--2. RETURNING\nUPDATE "+txtNameTable.getText()+" SET <data> WHERE <condition> ;\n\tVALUES(<nameData>) RETURNING *;\n\n\n--3. LEAST() y GREATEST()\nSELECT LEAST(<data>);\n\nSELECT GREATEST(<data>);\n\n\n4. COALESCE\nSELECT <nameCampo>, COALESCE(<nameCampo>,<'N/A'>) FROM "+txtNameTable.getText()+";");
                }else if (cb_db.getSelectedItem().equals("MySQL") && cb_estruct.getSelectedItem().equals("Funcion") && cb_db1.getSelectedItem().equals("Update")) {
                    txtContent.setText("--MySQLFunciones\n--1. Concatenar dos o mas cadenas en una sola column\nSELECT <nameCampo1>, <nameCampo2>, CONCAT(<nameCampo1>, ' ' ,<nameCampo2>) AS <'nameOfNewCampo'> FROM "+txtNameTable.getText()+";\n\n\n--2. Sumar todos los valores de una determinada columna\nSELECT SUM(<nameCampo>) AS <'nameOfNewCampo'> FROM "+txtNameTable.getText()+";\n\n\n--3. Crear una función almacenada\nDELIMITER//\nCREATE FUNCTION <nameFunction> (<parameter1>,<parameter2>,...)\nRETURNS tipoDato\n\tUPDATE "+txtNameTable.getText()+" SET <data> WHERE <condition> ;\nDELIMITER;");
                }else if (cb_db.getSelectedItem().equals("SQLServer") && cb_estruct.getSelectedItem().equals("Funcion") && cb_db1.getSelectedItem().equals("Update")) {
                    txtContent.setText("--SQLServerFunciones\n--1. Crear funciones almacenadas por el usuario\nCREATE OR REPLACE FUNCTION <nameFunction>(\n@DateValue AS DATETIME    /n/tUPDATE "+txtNameTable.getText()+" SET <data> WHERE <condition> ;\n\nRETURNS VARCHAR(MAX)\nAS\nBEGIN\n\tRETURN\n\t\tDATENAME(DAY, @DateValue)\nEND");
                }else if (cb_db.getSelectedItem().equals("Oracle") && cb_estruct.getSelectedItem().equals("Transaccion") && cb_db1.getSelectedItem().equals("Update")) {
                    txtContent.setText("--OracleTransacción\nDECLARE\n\t\t<definirVariablesUtilizar>\n\tBEGIN\n\t\tUPDATE "+txtNameTable.getText()+" SET <data> WHERE <condition> ;\n\tCOMMIT;\n\tEND;");
                }else if (cb_db.getSelectedItem().equals("PostgresSQL") && cb_estruct.getSelectedItem().equals("Transaccion") && cb_db1.getSelectedItem().equals("Update")) {
                    txtContent.setText("--PostgresSQLTransacciones\nBEGIN\n\t--<definirVariablesUtilizar>\n\tUPDATE "+txtNameTable.getText()+" SET <data> WHERE <condition> ;\n\tCOMMIT;\n\tEXCEPTION\n\t\tWHEN OTHERS THEN\n\t\tdbms_output.put_line('error en la transaction:' || SQLERRM);\n\t\tROLLBACK;\nEND;");
                }else if (cb_db.getSelectedItem().equals("MySQL") && cb_estruct.getSelectedItem().equals("Transaccion") && cb_db1.getSelectedItem().equals("Update")) {
                    txtContent.setText("--MySQLTransacción\nSTART TRANSACTION\n\tUPDATE "+txtNameTable.getText()+" SET <data> WHERE <condition> ;\nCOMMIT;");
                }else if (cb_db.getSelectedItem().equals("SQLServer") && cb_estruct.getSelectedItem().equals("Transaccion") && cb_db1.getSelectedItem().equals("Update")) {
                    txtContent.setText("--SQLServer-Transacciones\nBEGIN TRAN\n\tUPDATE "+txtNameTable.getText()+" SET <data> WHERE <condition> ;\nCOMMIT;");
                }else if (cb_db.getSelectedItem().equals("Oracle") && cb_estruct.getSelectedItem().equals("PlSQL") && cb_db1.getSelectedItem().equals("Update")) {
                    txtContent.setText("--OracleT-PL/SQL\nDECLARE\n\tl_message\n\tVARCHAR2 (100) := 'Hello Wordl';\nBEGIN\n\tdbms_output.put_line(l_message);\nEND;");
                }else if (cb_db.getSelectedItem().equals("PostgresSQL") && cb_estruct.getSelectedItem().equals("PlSQL") && cb_db1.getSelectedItem().equals("Update")) {
                    txtContent.setText("--PostgresSQL-PL/SQL\nDO $$\nBEGIN\n\tRAISE NOTICE 'PL/SQL';   --<nameCampo> <'nameData'>;\nEND\n$$");
                }else if (cb_db.getSelectedItem().equals("MySQL") && cb_estruct.getSelectedItem().equals("PlSQL") && cb_db1.getSelectedItem().equals("Update")) {
                    txtContent.setText("--MySQL-PL/SQL\n");
                }else if (cb_db.getSelectedItem().equals("SQLServer") && cb_estruct.getSelectedItem().equals("PlSQL") && cb_db1.getSelectedItem().equals("Update")) {
                    txtContent.setText("SQLServerPlSQL");
                }    
                
        }
    }//GEN-LAST:event_cmd_generar1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GeneradorStruct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GeneradorStruct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GeneradorStruct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GeneradorStruct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GeneradorStruct().setVisible(true);
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Backups.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    Logger.getLogger(Backups.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(Backups.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(Backups.class.getName()).log(Level.SEVERE, null, ex);
                }                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cb_db;
    private javax.swing.JComboBox<String> cb_db1;
    private javax.swing.JComboBox<String> cb_estruct;
    private javax.swing.JButton cmd_descargar;
    private javax.swing.JButton cmd_generar;
    private javax.swing.JButton cmd_generar1;
    private javax.swing.JButton cmd_limpiar;
    private javax.swing.JButton cmd_regresar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbl_db;
    private javax.swing.JLabel lbl_estructura;
    private javax.swing.JLabel lbl_estructura1;
    private javax.swing.JLabel lbl_titulo;
    private javax.swing.JTextArea txtContent;
    private javax.swing.JTextField txtNameTable;
    // End of variables declaration//GEN-END:variables

class fondoBl extends JPanel
            
    {
        private Image imagen;
        
        @Override
        public void paint(Graphics g)
        {
          imagen = new ImageIcon(getClass().getResource("/Imagenes/FondoB.jpg")).getImage();
          g.drawImage(imagen,0,0,getWidth(),getHeight(),this);
          setOpaque(false);
          
          super.paint(g);
        }
    }
    
    
    class fondoP extends JPanel
            
    {
        private Image imagen;
        
        @Override
        public void paint(Graphics g)
        {
          imagen = new ImageIcon(getClass().getResource("/Imagenes/FondoN.jpg")).getImage();
          g.drawImage(imagen,0,0,getWidth(),getHeight(),this);
          setOpaque(false);
          
          super.paint(g);
        }
    }

}
